# openapi: 3.0.3
# info:
#   title: Final Test
#   version: 1.0.0
# servers:
#   - url: http://localhost:3000


swagger: "2.0"
info:
  title: "Final test API"
  version: "1.0.0"
paths:
  /api/auth/signup:
    post:
      tags:
        - "Auth"
      summary: "Sign Up"
      description: "Create a new user account."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "user"
          in: "body"
          description: "User information"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "stefanchiciuc@gmail.admin"
              password:
                type: "string"
                example: "useruser"
              first_name:
                type: "string"
                example: "stefan"
              last_name:
                type: "string"
                example: "chiciuc"
              role:
                type: "string"
                example: "admin"
      responses:
        200:
          description: "User registered successfully."
  /api/auth/login:
    post:
      tags:
        - "Auth"
      summary: "Log In"
      description: "Log in with a registered user account."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "user"
          in: "body"
          description: "User credentials"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "stefanchiciuc@gmail.admin"
              password:
                type: "string"
                example: "useruser"
      responses:
        200:
          description: "User logged in successfully."
  /user/unban/{id}:
    post:
      tags:
        - "Auth"
      summary: "Unban a User"
      description: "Unban a user by ID."
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "User ID to unban"
          required: true
          type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User unbanned successfully."
  /user/ban/{id}:
    post:
      tags:
        - "Auth"
      summary: "Ban a User"
      description: "Ban a user by ID."
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "User ID to ban"
          required: true
          type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User banned successfully."
  /api/auth/logout:
    delete:
      tags:
        - "Auth"
      summary: "Log Out"
      description: "Log out the current user."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "user"
          in: "body"
          description: "User credentials"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "stefanchiciuc@gmail.admin"
              password:
                type: "string"
                example: "useruser"
      responses:
        200:
          description: "User logged out successfully."

  /articles:
    get:
      tags:
        - "Articles"
      summary: "Get all Articles"
      description: "Retrieve a list of all articles."
      produces:
        - application/json
      security:
        - bearerAuth: []
      responses:
        200:
          description: "List of articles retrieved successfully."

    post:
      tags:
        - "Articles"
      summary: Create a new article
      description: Create a new article.
      parameters: []
      requestBody:
        description: Article object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    image:
                      type: string
                    category_id:
                      type: integer
                    tag_id:
                      type: integer
              example:
                article:
                  title: "Rem aut consequuntur harum."
                  description: "Praesentium corporis eum. Necessitatibus quia odio. Et rerum repellat."
                  image: null
                  category_id: 5
                  tag_id: 8
      responses:
        201:
          description: Article created successfully
        400:
          description: Bad request - Invalid input data
      security:
        - BearerAuth: []

  /articles/{id}:
    get:
      tags:
        - "Articles"
      summary: "Get an Article with Comments"
      description: "Retrieve an article and its comments by ID."
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Article ID to retrieve"
          required: true
          type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Article and comments retrieved successfully."
    put:
      tags:
        - "Articles"
      summary: "Update an Article"
      description: "Update an article by ID."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Article ID to update"
          required: true
          type: "integer"
        - name: "article"
          in: "body"
          description: "Updated article information"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
              description:
                type: "string"
              image:
                type: "string"
              category_id:
                type: "integer"
              tag_id:
                type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Article updated successfully."

    delete:
      tags:
        - "Articles"
      summary: "Delete an Article"
      description: "Delete an article by ID."
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Article ID to delete"
          required: true
          type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Article deleted successfully."
  /search:
    get:
      tags:
        - "Articles"
      summary: "Search in Articles"
      description: "Search for articles by keyword."
      produces:
        - application/json
      parameters:
        - name: "request"
          in: "query"
          description: "Search keyword"
          required: true
          type: "string"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Search results retrieved successfully."

  /comments:
    get:
      tags:
        - "Comments"
      summary: "Get all Comments"
      description: "Retrieve a list of all comments."
      produces:
        - application/json
      security:
        - bearerAuth: []
      responses:
        200:
          description: "List of comments retrieved successfully."
    post:
      tags:
        - "Comments"
      summary: Create a new comment
      description: Create a new comment.
      parameters: []
      requestBody:
        description: Comment object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: object
                  properties:
                    content:
                      type: string
                    rating:
                      type: number
                    article_id:
                      type: integer
              example:
                comment:
                  content: "Dolorem eligendi consequatur. Est a aut. Incidunt voluptates non."
                  rating: 1.826133500654596
                  article_id: 7
      responses:
        201:
          description: Comment created successfully
        400:
          description: Bad request - Invalid input data
      security:
        - BearerAuth: []
  /comments/{id}:
    get:
      tags:
        - "Comments"
      summary: "Get an Comment"
      description: "Retrieve an article and its comments by ID."
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Comment ID to retrieve"
          required: true
          type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Comment retrieved successfully."
    put:
      tags:
        - "Comments"
      summary: "Update an Comment"
      description: "Update an comment by ID."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Comment ID to update"
          required: true
          type: "integer"
        - name: "comment"
          in: "body"
          description: "Updated comment information"
          required: true
          schema:
            type: object
            properties:
              comment:
                type: object
                properties:
                  content:
                    type: string
                  rating:
                    type: number
                  article_id:
                    type: integer
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Comment updated successfully."
    delete:
      tags:
        - "Comments"
      summary: "Delete an Comment"
      description: "Delete an comment by ID."
      produces:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "Comment ID to delete"
          required: true
          type: "integer"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Comment deleted successfully."






securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
 